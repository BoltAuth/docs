{"pages":[{"title":"Bolt Auth \u2014 Site Auth Management for Bolt","text":"If you're just starting out, you might be interested in the Quick Start Guide.","tags":"","url":"index.html"},{"title":"Quick Start Guide","text":"Install the extension Update database Enable an authentication provider Configure outgoing mail Enable registration Templates Authentication Profiles Set up initial test greeting Registering your first user Final words The default Twig templates in Auth have been done with Bolt's base theme (currentlybase-2016) in mind. If you are setting up Auth for the first time, you may find it useful to first test on a site set up to run the current base theme, and then switch over when you're happy with how it is working. Install the extension See the installation page, and ensure you've updated the site's database Enable debug mode to get additional feedback from Auth during set up. Update database Enable an authentication provider Set up the Local authentication provider, and set enabled: true providers: local: enabled: true keys: client_id: localdefault client_secret: localdefault scopes: [ user ] Configure outgoing mail You should have already done this as part of your inital setup of Bolt. But double-check that bolt can send mail to users and auth. The Auth plugin relies on outgoing mail to be working and may fail silently if it can't. Look for the mailoptions setting in config.yml Note: On some servers it is required that you set a correct name and email address for the notifications. If this is not configured your email may not be sent at all. notifications: name: This is your email name email: noreply@example.com Enable registration In order to register your first account, you need to enable registration in your Auth configuration file, e.g.: registration: enabled: true Note: If you get 404 responses when trying to visit the registration URL then most likely you forgot to enable this setting. Templates Templating is very configurable. At a minimum, Auth needs &quot;parent&quot; templates to inherit layout from. Usually the parent role is split in two groups, &quot;authentication&quot;, and &quot;profiles&quot;. By default, Auth will use its own minimal parent templates that extend the Bolt base theme's master template. However if you wish to create your own, just set the relative path to them in your theme directory in Auth configuration file, e.g.: templates: authentication: parent: auth\/_authentication.twig profile: parent: auth\/_profile.twig Finally add the blocks from the sections below to your desired position your custom parent template. Authentication {# Password &amp; OAuth2 provider login forms #} {% block login %} {% endblock login %} {# Logout form #} {% block logout %} {% endblock logout %} {# Password recovery forms #} {% block recovery %} {% endblock recovery %} Profiles {# Auth profile edit &amp; view forms #} {% block auth %} {% endblock auth %} Set up initial test greeting NOTE: Do not attempt to complete this section by adding this Twig snippet to a HTML field in a ConentType record \u00e2\u0080\u00a6 It will not work. Add the snippet below somewhere in a template for an existing URL, and browse to the URL. {% if is_auth() %} {% set auth = auth() %} &lt;p&gt;Hello, {{ auth.displayname }}. You were last seen at {{ auth.lastseen }}, logging on from {{ auth.lastip }}, and your email is {{ auth.email }}&lt;\/p&gt; {% else %} &lt;p&gt;Welcome visitor from the Internet!&lt;\/p&gt; {% endif %} When you've not yet registered and logged in, you should see the message &quot;Welcome visitor from the Internet!&quot; displayed. Upon login (still coming below), refreshing this page should display the personalised greeting. Registering your first user If everything so far has worked, you should now be able to visit the registration page, by default found at the URI \/auth\/profile\/register You will require a valid email address, e.g. DNS has a valid mail server registered. Meaning @example.com won't work Final words The following links might be good next places to look: Form Display gives details on customising Twig template rendering Twig Functions provides a list of available Twig template functions Authentication Providers for details on adding OAuth2 providers like Facebook &amp; Google Routes &amp; URLs if you'd like to understand, or customise, some of the routes used by Auth Example: Menu Entries gives a small example of a menu for Auth specific entries","tags":"","url":"quick-start.html"},{"title":"Installation","text":"IMPORTANT: Database Check &amp; Update Installation is fairly straightforward. From the Extend page in the admin section of your Bolt site, type and select &quot;auth&quot; and click the &quot;Browse Versions&quot; button. Then select an appropriate stable, or development (unstable), version for install. IMPORTANT: Database Check &amp; Update Once complete, visit the Database check &amp; update page as you will have database tables that need added to the database in order for Auth to function. Should you be presented with an update notice, for example: Then you should run the update.","tags":"","url":"installation.html"},{"title":"Authentication Providers","text":"Supported Providers Set up Obtain Callback URL Obtain Provider Keys Configuration Local (valid email address &amp; password) Google Facebook GitHub Generic OAuth2 Supported Providers Config key Description local Local (valid email address &amp; password) google Google facebook Facebook github GitHub generic Generic OAuth2 provider Set up Obtain Callback URL The URL for each provider will depend on: Your web site is running HTTP or HTTPS (HTTPS is highly recommended) Authentication URI configured in Auth OAuth provider's name e.g. using default routes for the domain example.com, and configuring GitHub as the OAuth provider: https:\/\/example.com\/authentication?provider=github Obtain Provider Keys All required providers must be both configured, and enabled, under the providers: configuration key. OAuth2 providers will also fail to work if valid client_id and client_secret keys are not set. This will vary from provider to provider, and the details and steps change too often to reliably document here. For more information see: Google \u00e2\u0080\u0094 https:\/\/console.developers.google.com\/ Facebook \u00e2\u0080\u0094 https:\/\/developers.facebook.com\/apps\/ GitHub \u00e2\u0080\u0094 https:\/\/github.com\/settings\/developers Configuration Each provider under the providers: key should have the following configuration block, with provider_name: being one of the supported provider config keys. Key Sub key Type Description enabled: boolean Setting to true enables provider label: sign_in: string Default value for this provider's login button associate: string Default value for this provider's account association button keys: client_id: string Public key from OAuth2 provider client_secret: string Private key from OAuth2 provider scopes: array OAUth2 scopes to request Local (valid email address &amp; password) providers: local: enabled: keys: client_id: --- set to random string --- client_secret: --- set to random string --- scopes: [ user ] Google providers: google: enabled: true keys: client_id: client_secret: scopes: [ openid, profile, email ] Facebook providers: facebook: enabled: true keys: client_id: client_secret: scopes: [ email ] GitHub providers: github: enabled: true keys: client_id: client_secret: scopes: [ user ] Generic OAuth2 providers: generic: enabled: true keys: client_id: client_secret: scopes: [ ] options: urlAuthorize: https:\/\/oauth2.example.com\/oauth\/authorize urlAccessToken: https:\/\/oauth2.example.com\/oauth\/token urlResourceOwnerDetails: https:\/\/oauth2.example.com\/oauth\/me","tags":"","url":"authentication-providers.html"},{"title":"Routes & URLs","text":"Base Routes Configuration Authentication Routes Configuration Authentication Callback Route Configuration Auth Routes Configuration Base Routes A default configuration will use the base URI: \/authentication \u00e2\u0080\u0094 For login, logout, &amp; password resets \/auth \u00e2\u0080\u0094 For registration, editing, &amp; viewing profiles Configuration The base urls: config key values each take a alpha string of characters. urls: authenticate: authentication auth: auth Authentication Routes Login, logout and password resets occur on the following routes: URI Description \/{authenticate}\/login Login (password &amp; OAuth) \/{authenticate}\/logout Logout \/{authenticate}\/reset Password reset (request &amp; submit) Where: {authenticate} \u00e2\u0080\u0094 value set for the authenticate: key in the url: config setting. Configuration None presently. Authentication Callback Route OAuth2 authentication provider callback URI. URI Description \/{authenticate}\/oauth2\/callback?provider={providerName} Callback route Where: {authenticate} \u00e2\u0080\u0094 value set for the authenticate: key in the url: config setting. {providerName} \u00e2\u0080\u0094 Name of the provider making the callback Configuration This is not configurable as such. However, when setting up the OAuth2 keys your provider will require you to provide a valid callback URL. The {providerName} value must match the provider_name key for that provider's callback. providers: provider_name: \u00e2\u0080\u00a6 An example URL would be: https:\/\/example.com\/authentication\/oauth2\/callback?provider=google NOTE: Change the scheme (http or https), and domain, to match the site deployed on. Auth Routes Auth profile editing, viewing, and registration, occurs on the following routes: URI Description \/{auth}\/profile\/register Registration \/{auth}\/profile\/edit Profile editing \/{auth}\/profile\/view Profile viewing Where: {auth} \u00e2\u0080\u0094 value set for the auth: key in the url: config setting. Configuration None presently.","tags":"","url":"routes-urls.html"},{"title":"Redirection","text":"Setting Custom Redirects Configuration Setting Custom Redirects URLs that a auth will be redirected to after login\/logout can be set in configuration via the redirects: key. If not set, auth will be redirected to the referring page after login, and the homepage after logout. Configuration The redirects: key has two parameters, login: &amp; logout. Each take either a relative or absolute URL. redirects: login: \/auth\/profile logout: \/authentication\/login","tags":"","url":"redirection.html"},{"title":"Twig Functions","text":"Authentication Renderers URL Generators Profiles Renderers URL Generators Restricting Access Auth Data Authentication Renderers Function Parameter Description {{ auth_auth_login() }} string Render the login template {{ auth_auth_logout() }} string Render the logout template {{ auth_auth_switcher() }} string Render either the login or logout template depending on login state {{ auth_auth_associate() }} string Render the OAuth account association template URL Generators Function Parameter Description {{ auth_link_auth_login() }} integer Link to login {{ auth_link_auth_logout() }} integer Link to logout {{ auth_link_auth_reset() }} integer Link to password reset All functions default to 2 if nothing supplied. Valid parameter values: 0 \u00e2\u0080\u0094 Generates an absolute URL, e.g. &quot;http:\/\/example.com\/dir\/file&quot;. 1 \u00e2\u0080\u0094 Generates an absolute path, e.g. &quot;\/dir\/file&quot;. 2 \u00e2\u0080\u0094 Generates a relative path based on the current request path, e.g. &quot;..\/parent-file&quot;. 4 \u00e2\u0080\u0094 Generates a network path, e.g. &quot;\/\/example.com\/dir\/file&quot;. Such reference reuses the current scheme but specifies the host. Profiles Renderers Function Parameter Description {{ auth_profile_edit() }} string Render the profile edit template {{ auth_profile_register() }} string Render the profile registration template URL Generators Function Parameter Description {{ auth_link_profile_edit() }} integer Link to profile edit {{ auth_link_profile_register() }} integer Link to profile registration All functions default to 2 if nothing supplied. Valid parameter values: 0 \u00e2\u0080\u0094 Generates an absolute URL, e.g. &quot;http:\/\/example.com\/dir\/file&quot;. 1 \u00e2\u0080\u0094 Generates an absolute path, e.g. &quot;\/dir\/file&quot;. 2 \u00e2\u0080\u0094 Generates a relative path based on the current request path, e.g. &quot;..\/parent-file&quot;. 4 \u00e2\u0080\u0094 Generates a network path, e.g. &quot;\/\/example.com\/dir\/file&quot;. Such reference reuses the current scheme but specifies the host. Restricting Access Function Description {{ is_auth() }} Returns true if the broswer session is logged in Auth Data Function Parameter Description {{ auth() }} Returns an entity array of the auth's account information {{ auth_meta() }} Returns an entity array of the auth's meta data (if any) {{ auth_has_role() }} string Returns true if the logged in user has the given Auth roles {{ auth_providers() }} Returns an array of providers connected to the logged in user account","tags":"","url":"twig-functions.html"},{"title":"Access Control","text":"Template Elements Roles Configuration Routes Template Elements A auth's login status can be checked with the is_auth() function, and the profile data can be returned via the auth() function, e.g.: {% if is_auth() %} {% set auth = auth() %} &lt;p&gt;Hello, {{ auth.displayname }}. You were last seen at {{ auth.lastseen }}, logging on from {{ auth.lastip }}, and your email is {{ auth.email }}&lt;\/p&gt; {% else %} &lt;p&gt;Welcome visitor from the Internet!&lt;\/p&gt; {% endif %} Roles Roles can be added in one of two ways, either the roles: key in the configuration file, or via events. To check if a auth account has a role, you can use the Twig function auth_has_role(). This function takes a string as the parameter. {% if auth_has_role('admin') %} &lt;h1&gt;Greetings, master!&lt;\/h1&gt; {% endif %} Configuration The roles: subkey auth: takes an associative array of role names and human readable labels as values, e.g.: roles: auth: admin: Administrator participant: Participant Routes Not currently implemented","tags":"","url":"access-control.html"},{"title":"Form Display","text":"Template Overrides Configuration Labels Configuration Placeholders Configuration Add-ons Configuration The forms: key has 4 parameter keys: forms: templates: labels: placeholders: addons: Key Description templates: Twig template paths &amp; names labels: Default labels to be displayed for certain fields (also configurable in template) placeholders: Placeholder text for certain fields addons: UI add-ons. Currently only bolt\/zocial-icons is supported Template Overrides Twig template overrides can be specified via the templates: sub-key of the forms: key. These parameters allow the overriding of certain, or all, templates use to render Auth forms. Configuration Each parameter should be a relative path to a Twig template file in your theme directory. NOTE: only the templates you want\/need to override should be specified. templates: profile: parent: path\/to\/profile\/_profile.twig associate: path\/to\/profile\/register.twig edit: path\/to\/profile\/edit.twig register: path\/to\/profile\/register.twig verify: path\/to\/profile\/verify.twig view: path\/to\/profile\/view.twig authentication: parent: path\/to\/authentication\/_authentication.twig associate: path\/to\/authentication\/associate.twig login: path\/to\/authentication\/login.twig logout: path\/to\/authentication\/logout.twig recovery: path\/to\/authentication\/recovery.twig error: parent: path\/to\/error\/_auth_error.twig error: path\/to\/error\/auth_error.twig feedback: feedback: path\/to\/feedback\/feedback.twig verification: subject: path\/to\/verification\/subject.twig html: path\/to\/verification\/html.twig text: path\/to\/verification\/text.twig recovery: subject: path\/to\/recovery\/subject.twig html: path\/to\/recovery\/html.twig text: path\/to\/recovery\/text.twig You can find the installed defaults in the Auth source directory: {site root directory}\/extensions\/vendor\/boltauth\/auth\/ Labels HTML input field label defaults can be specified via the labels: sub-key of the forms: key. Configuration labels: login: Login logout: Logout displayname: Public Name email: Email Address password_first: Password password_second: Repeat Password profile_save: Save &amp; Continue These labels can also be set in Twig your templates as an attribute to the Twig function form_row(), e.g. to set the label &quot;Submit me&quot; on the submit button on the form called form_name: {{ form_row(form_name.submit, { 'label': 'Submit me' }) }} Placeholders HTML input field placeholder values can be specified via the placeholders: sub-key of the forms: key. Placeholder values are a hint to the user of what can be entered in the input field, and must not contain carriage returns or line-feeds. NOTE: Do not use the placeholder attribute instead of a element, as their purposes are different: the &lt;label&gt; attribute describes the role of the form element; that is, it indicates what kind of information is expected, the placeholder attribute is a hint about the format the content should take. NOTE: There are cases in which the placeholder attribute is never displayed to the user, so the form must be understandable without it. Configuration placeholders: displayname: The name you would like to display publicly\u00e2\u0080\u00a6 email: Your email address\u00e2\u0080\u00a6 password_first: Enter your password\u00e2\u0080\u00a6 password_second: Repeat the above password\u00e2\u0080\u00a6 Add-ons Auth has very limited ability to be extended visually by, currently it supports the Zocial Icons extension that gives some additional CSS handling to form buttons. Configuration addons: zocial: true Requires the bolt\/zocial-icons extension to be installed.","tags":"","url":"form-display.html"},{"title":"Debugging Auth","text":"Enabling debugging Configuration Enabling debugging When setting up and configuring Auth, you should enable debug in both your Bolt configuration, and the extension configuration file as well. Configuration debug: true","tags":"","url":"debugging.html"},{"title":"Migrating from Members","text":"Database MySQL PostgreSQL SQLite Config file Twig functions PHP usage The Auth extension was previously called Members. If you used members you will need to migrate database tables, config files, twig functions and any php use of events\/namespaces to the new name. Database To rename the database tables run the following: MySQL ALTER TABLE `bolt_members_account` RENAME TO `bolt_auth_account` ; ALTER TABLE `bolt_members_account_meta` RENAME TO `bolt_auth_account_meta` ; ALTER TABLE `bolt_members_oauth` RENAME TO `bolt_auth_oauth` ; ALTER TABLE `bolt_members_provider` RENAME TO `bolt_auth_provider` ; ALTER TABLE `bolt_members_token` RENAME TO `bolt_auth_token` ; PostgreSQL ALTER TABLE bolt_members_account RENAME TO bolt_auth_account; ALTER TABLE bolt_members_account_meta RENAME TO bolt_auth_account_meta; ALTER TABLE bolt_members_oauth RENAME TO bolt_auth_oauth; ALTER TABLE bolt_members_provider RENAME TO bolt_auth_provider; ALTER TABLE bolt_members_token RENAME TO bolt_auth_token; ALTER SEQUENCE bolt_members_account_id_seq RENAME TO bolt_auth_account_id_seq; ALTER SEQUENCE bolt_members_account_meta_id_seq RENAME TO bolt_auth_account_meta_id_seq; ALTER SEQUENCE bolt_members_oauth_id_seq RENAME TO bolt_auth_oauth_id_seq; ALTER SEQUENCE bolt_members_provider_id_seq RENAME TO bolt_auth_provider_id_seq; ALTER SEQUENCE bolt_members_token_id_seq RENAME TO bolt_auth_token_id_seq; SQLite Not tried yet, but should be the same as MySQL. Let me know if you tried it! Config file The Members config file was called members.bolt.yml. Rename that file to auth.boltauth.yml. Twig functions Any twig functions that were called anything with member should be renamed to the equivalent with auth. For example is_member() is now is_auth()`. PHP usage Any other extensions that used the old name will need to be updated. As an example you can look at this commit in AuthFields or this commit in the Bolt market","tags":"","url":"migrating-from-members.html"},{"title":"Fetching logged in auth","text":"\/\/ Get $app \/** @var \\Bolt\\Extension\\BoltAuth\\Auth\\AccessControl\\Session $authSession *\/ $authSession = $app['auth.session']; if ($authSession-&gt;hasAuthorisation()) { \/** @var \\Bolt\\Extension\\BoltAuth\\Auth\\AccessControl\\Authorisation $auth *\/ $auth = $authSession-&gt;getAuthorisation(); \/** @var \\Bolt\\Extension\\BoltAuth\\Auth\\Storage\\Entity\\Account $account *\/ $account = $auth-&gt;getAccount(); \/** @var string $authId *\/ $authId = $account-&gt;getGuid(); }","tags":"","url":"Examples\/fetching-logged-in-auth.html"},{"title":"Menu Entries","text":"Below is an example of a menu named &quot;auth&quot; that you can use as a base to add to your app\/config\/menu.yml file for your site. auth: - label: Authentication link: &quot;#&quot; submenu: - label: Login path: authentication\/login - label: Reset your password path: authentication\/reset - label: Logout path: authentication\/logout - label: Auth Profiles link: &quot;#&quot; submenu: - label: Registration path: auth\/profile\/register - label: View your profile path: auth\/profile\/view - label: Edit your profile path: auth\/profile\/edit","tags":"","url":"Examples\/menu.html"},{"title":"Adding Meta Fields","text":"Extension Loader Class Form Type Class Form Entity Class Extension Loader Class Ensure you have the following import statements at the top ofyour class file. use Bolt\\Extension\\BoltAuth\\Auth\\Event\\FormBuilderEvent; use Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthProfileEvent; use Bolt\\Extension\\BoltAuth\\Auth\\Form\\AuthForms; use Symfony\\Component\\EventDispatcher\\EventDispatcherInterface; The extension loading class will need a pre-save and form build events. \/** * {@inheritdoc} *\/ protected function subscribe(EventDispatcherInterface $dispatcher) { $dispatcher-&gt;addListener(AuthEvents::AUTH_PROFILE_PRE_SAVE, [$this, 'onProfileSave']); $dispatcher-&gt;addListener(FormBuilderEvent::BUILD, [$this, 'onRequest']); } \/** * Tell Auth what fields we want to persist. * * @param AuthProfileEvent $event *\/ public function onProfileSave(AuthProfileEvent $event) { \/\/ Meta fields that we want to register $fields = [ 'postcode', ]; $event-&gt;addMetaEntryNames($fields); } \/** * @param FormBuilderEvent $event *\/ public function onRequest(FormBuilderEvent $event) { if ($event-&gt;getName() !== AuthForms::PROFILE_EDIT &amp;&amp; $event-&gt;getName() !== AuthForms::PROFILE_VIEW) { return; } $app = $this-&gt;getContainer(); \/\/ This is your custom Type class that extends \\Bolt\\Extension\\BoltAuth\\Auth\\Form\\Type\\ProfileEditType $type = new \\Bolt\\Extension\\AuthorName\\ExtensionName\\Form\\Type\\ProfileEditType($app['auth.config']); \/\/ This is the class name of your custom eneity $entityClassName = \\Bolt\\Extension\\AuthorName\\ExtensionName\\Form\\Entity\\Profile::class; $event-&gt;setType($type); $event-&gt;setEntityClass($entityClassName); } Form Type Class Create the file src\/Form\/Type\/ProfileEditType.php adding the desired postcode field. use Bolt\\Extension\\BoltAuth\\Auth\\Form\\Type\\ProfileEditType as AuthProfileEditType; use Symfony\\Component\\Form\\Extension\\Core\\Type; use Symfony\\Component\\Form\\FormBuilderInterface; use Symfony\\Component\\Validator\\Constraints as Assert; use Bolt\\Translation\\Translator as Trans; class ProfileEditType extends AuthProfileEditType { \/** * {@inheritdoc} *\/ public function buildForm(FormBuilderInterface $builder, array $options) { parent::buildForm($builder, $options); $builder -&gt;add('postcode', Type\\TextType::class, [ 'label_attr' =&gt; [ 'class' =&gt; 'main col-xs-12' ], 'attr' =&gt; [ 'class' =&gt; 'form-control large', 'placeholder' =&gt; Trans::__('Your postcode...') ], 'label' =&gt; Trans::__('Postcode:'), 'constraints' =&gt; [ ], 'required' =&gt; false, ]) ; } } Form Entity Class Create the file src\/Form\/Entity\/Profile.php adding the desired postcode field. use Bolt\\Extension\\BoltAuth\\Auth\\Form\\Entity\\Profile as BaseProfile; use Symfony\\Component\\Validator\\Constraints as Assert; class Profile extends BaseProfile { \/** @var string *\/ protected $postcode; \/** * @return string *\/ public function getPostcode() { return $this-&gt;postcode; } \/** * @param string $postcode *\/ public function setPostcode($postcode) { $this-&gt;postcode = $postcode; } }","tags":"","url":"Extending\/adding-meta-fields.html"},{"title":"Adding Roles","text":"Extension Loader Class Callback Function Roles can be added in one of two ways, either the roles: key in the configuration file, or via events. This guide explains the required steps in the process to creating an extension that adds custom roles via event. Extension Loader Class To add roles to Auth via your extension, you can add a listener to the AuthEvents::AUTH_ROLE event. You will need the following use statements at the top of your PHP class file: use Bolt\\Extension\\BoltAuth\\Auth\\AccessControl\\Role; use Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents; use Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthRolesEvent; use Symfony\\Component\\EventDispatcher\\EventDispatcherInterface; In your extension's subscribe() function you can define the listener and pass in the callback that will be called when the event is triggered, e.g. protected function subscribe(EventDispatcherInterface $dispatcher) { $dispatcher-&gt;addListener(AuthEvents::AUTH_ROLE, [$this, 'myCallbackRunction']); } Callback Function The callback function will be passed a AuthRolesEvent object, you can then use the events addRole() function to add \\Bolt\\Extension\\BoltAuth\\Auth\\AccessControl\\Role objects, e.g. public function myCallbackRunction(AuthRolesEvent $event) { $event-&gt;addRole(new Role('koala', 'Friendly Koalas')); $event-&gt;addRole(new Role('dropbear', 'Deady Drop Bears')); } The Role class takes two parameters, programmatic name and a display name that will be used in the auth admin pages in Bolt's backend admin section.","tags":"","url":"Extending\/adding-roles.html"},{"title":"Events","text":"Dispatched Events Login Login completion event Auth Role Data Role set up Profile New profile registration New profile verification Save to storage Notifications Notification email pre-send. Notification email send failure. Password Reset Form Builder Controller Exceptions Event Classes AuthLoginEvent AuthNotificationEvent AuthNotificationFailureEvent AuthProfileEvent AuthRolesEvent AuthLoginEvent FormBuilderEvent ExceptionEvent Dispatched Events Login Login completion event Dispatched after all checks are validated. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_LOGIN Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthLoginEvent Auth Role Data Role set up Auth access level roles. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_ROLE Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthRolesEvent Profile New profile registration Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_PROFILE_REGISTER Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthProfileEvent New profile verification Dispatched at successful verification of a new account. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_PROFILE_VERIFY Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthProfileEvent Save to storage Prior to save of a profile form. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_PROFILE_PRE_SAVE Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthProfileEvent Post-save of a profile form. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_PROFILE_POST_SAVE Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthProfileEvent Notifications Notification email pre-send. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_NOTIFICATION_PRE_SEND Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthNotificationEvent Notification email send failure. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_NOTIFICATION_FAILURE Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthNotificationFailureEvent Password Reset Account password reset request. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthEvents::AUTH_PROFILE_RESET Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\AuthNotificationEvent Form Builder Dispatched when a builder is created for a Auth form. Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\FormBuilderEvent::BUILD Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\FormBuilderEvent Controller Exceptions src\/Controller\/Authentication.php ExceptionEvent::ERROR, new ExceptionEvent($e)); Event Name Bolt\\Extension\\BoltAuth\\Auth\\Event\\ExceptionEvent::ERROR Object Bolt\\Extension\\BoltAuth\\Auth\\Event\\ExceptionEvent Event Classes AuthLoginEvent Property Type $account Bolt\\Extension\\BoltAuth\\Auth\\Storage\\Entity\\Account AuthNotificationEvent Property Type $message Swift_Mime_Message AuthNotificationFailureEvent Property Type $message Swift_Mime_Message $exception Swift_SwiftException AuthProfileEvent Property Type $account Bolt\\Extension\\BoltAuth\\Auth\\Storage\\Entity\\Account $metaEntities Bolt\\Extension\\BoltAuth\\Auth\\Storage\\Entity\\AccountMeta[] $metaEntityNames string[] AuthRolesEvent Property Type $roles Bolt\\Extension\\BoltAuth\\Auth\\AccessControl\\Role[] AuthLoginEvent Property Type $account Bolt\\Extension\\BoltAuth\\Auth\\Storage\\Entity\\Account FormBuilderEvent Property Type $name string $type Symfony\\Component\\Form\\FormTypeInterface $entity Bolt\\Extension\\BoltAuth\\Auth\\Form\\Entity\\EntityInterface $entityClass string ExceptionEvent Property Type $exception \\Exception","tags":"","url":"Extending\/events.html"},{"title":"Extending Auth","text":"Auth is event driven and provides a number of dispatcher that your own extension can listen for, and affect the behaviour of different parts of the Auth extension. There is an example repository called Auth Addon Example that shows some of the available behaviour. See: Adding meta fields Adding roles Events","tags":"","url":"Extending\/extending.html"}]}